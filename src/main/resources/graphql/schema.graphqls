type Query {
    books: [Book]
    book(id: ID!): Book
    author(id: ID!): Author
}

type Mutation {
    addReview(inputReview: AddBookReviewInput!): AddReviewResponse!
}

type Book {
    id: ID!
    title: String!
    genderName: String @deprecated(reason: "Use `gender` property.")
    gender: Gender
    authors: [Author]
    reviews: [Review]
    price: Float
}

type Gender {
    id: ID!
    name: String!
}

type Author {
    id: ID!
    name: String!
    biography: String
}

type Review {
    id: ID!
    comment: String
    rating: Int
    user: User
}

type User {
    id: ID!
    name: String!
}

input AddBookReviewInput {
    bookId: ID!
    userId: ID!
    rating: Int!
    comment: String
}

type AddReviewResponse {
    book: Book
    averageRating: Float
    topReviews: [String]
}

interface BaseResponse {
    code: Int
    message: String
    description: String
}

type EnforcedBookResponse implements BaseResponse {
    code: Int
    message: String
    description: String
    book: Book
}

